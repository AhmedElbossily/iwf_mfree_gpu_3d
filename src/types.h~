#ifndef TYPES_H_
#define TYPES_H_

#include <cuda.h>
#include <cuda_runtime.h>
#include <stdio.h>

#include <glm/glm.hpp>

//#define USE_DOUBLE

#ifdef USE_DOUBLE
//built in vector types
#define float_t double
#define float2_t double2
#define float3_t double3
#define float4_t double4

// texture types and texture fetching
#define float_tex_t  int2
#define float2_tex_t int4
#define float4_tex_t int4

#define make_float2_t make_double2
#define make_float3_t make_double3
#define make_float4_t make_double4

#define texfetch1 fetch_double
#define texfetch2 fetch_double2
#define texfetch4 fetch_double2

// glm types
#define mat3x3_t glm::dmat3x3
#define vec2_t glm::dvec2
#define vec3_t glm::dvec3

// mathematic functions
#define sqrt_t sqrt
#define exp_t exp
#define log_t log

#else

//-------------------------------------------------------------

// built in vector types
#define float_t float
#define float2_t float2
#define float3_t float3
#define float4_t float4

#define make_float2_t make_float2
#define make_float3_t make_float3
#define make_float4_t make_float4

// texture types
#define float_tex_t  float
#define float2_tex_t float2
#define float4_tex_t float4

#define texfetch1 tex1Dfetch
#define texfetch2 tex1Dfetch
#define texfetch4 tex1Dfetch

// glm types
#define mat3x3_t glm::mat3x3
#define vec2_t glm::vec2
#define vec3_t glm::vec3

// mathematic functions
#define sqrt_t sqrtf
#define exp_t expf
#define log_t logf

#endif

bool check_cuda_error();
bool check_cuda_error(const char *marker);

//#define TVF
//#define SURFACE	//disables TVF at the surface
//
//#define CSPM

#define Thermal_Conduction_Brookshaw
//#define Thermal_Conduction_PSE

// Customization of CUDA- Blocksizes
#define BLOCK_SIZE 256
#define UNIFIED_SIZE 0		// 0 - all Blocksizes as above value; 1 - individual Blocksizes as below
#define BLOCK_SIZE_eos					BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (4 - UNIFIED_SIZE)
#define BLOCK_SIZE_artif_stress			BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_jaumann_rate			BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_continuity			BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (4 - UNIFIED_SIZE)
#define BLOCK_SIZE_momentum				BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_advection			BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (4 - UNIFIED_SIZE)
#define BLOCK_SIZE_JC_RR				BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (1 - UNIFIED_SIZE)
#define BLOCK_SIZE_JC_OR				BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (1 - UNIFIED_SIZE)
#define BLOCK_SIZE_JC_OR_RR				BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (1 - UNIFIED_SIZE)
#define BLOCK_SIZE_BC_thermal_tool		BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (1 - UNIFIED_SIZE)
#define BLOCK_SIZE_BC_thermal_particles BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (1 - UNIFIED_SIZE)
#define BLOCK_SIZE_BC 					BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_blanking 			BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_friction_heat 		BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_hash 				BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_update_tool			BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_cells_test			BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_contact_force		BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)
#define BLOCK_SIZE_leapfrog				BLOCK_SIZE + UNIFIED_SIZE * BLOCK_SIZE * (2 - UNIFIED_SIZE)

#endif /* TYPES_H_ */
